@inject WeatherApiService WeatherService
@using ChartJs.Blazor.PieChart
@using System.Drawing
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Handlers
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.Interop
@using ChartJs.Blazor.LineChart


@code {

    private PieConfig _config;
    private LineConfig _config2;

    [Parameter]
    public dynamic? myData { get; set; }

    [Parameter]
    public List<dynamic>? dynamicData { get; set; }


    [Parameter]
    public EventCallback<string> OnUpdateForecast { get; set; }

    // Method to update the parent value and trigger the event callback
    private async Task UpdateForecast(string s)
    {
        await OnUpdateForecast.InvokeAsync(s);
    }

    [Parameter]
    public bool Celsius { get; set; }

    [Parameter]
    public EventCallback<string> OnUpdateParentData { get; set; }


    // Method to update the parent value and trigger the event callback
    private async Task UpdateParentData(string s)
    {
        await OnUpdateParentData.InvokeAsync(s);
    }



    private int sliderValue = 0;
    private bool ForecastDays = false;

    private void UpdateSlider(ChangeEventArgs e)
    {
        sliderValue = Convert.ToInt32(e.Value);
        timeAdjustmentMinutes = sliderValue * 1;
        if (!ForecastDays)
        {
            adjustedTime = current.AddMinutes(timeAdjustmentMinutes);

        }
        else
        {

            if (sliderValue <= 1380)
            {
                adjustedTime = adjustedTime.Date;
                adjustedTime = adjustedTime.AddMinutes(timeAdjustmentMinutes);
            }
        }

    }
    private void ResetSlider(int day)
    {
        if(day==0)
        {
            ForecastDays = false;
        }
        else
        {
            ForecastDays = true;
        }
        DateTime currentDate = DateTime.Now;
        DateTime tomorrowDate = currentDate.AddDays(day);
        adjustedTime = new DateTime(tomorrowDate.Year, tomorrowDate.Month, tomorrowDate.Day, currentDate.Hour, currentDate.Minute, 0);


    }
    private DateTime current = DateTime.Now;
    private DateTime currentTime = DateTime.Now;
    private DateTime forecastTime = DateTime.Now;
    private int timeAdjustmentMinutes;

    private DateTime adjustedTime;
    protected override void OnInitialized()
    {
        // Get the current date
        DateTime currentDate = DateTime.Now;
        adjustedTime = currentDate;
        _config = new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Weekly Forecast"
                    }
                }

            };
        _config2 = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "ChartJs.Blazor Line Chart"
                    },
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Hover = new Hover
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Scales = new Scales
                    {
                        XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Month"
                            }
                        }
                    },
                        YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Value"
                            }
                        }
                    }
                    }
                }
            };

     

        

    }
    private bool ShowGraph = false; 



}

<div class="container1">
       <div class="container1_margin">
    <p>Current Weather</p>
    @{


        string formattedTime;
        string format = "yyyy-MM-dd HH:mm";

        // Extract the time component and format it as HH:mm
        string input = dynamicData[0].location.localtime;
            DateTime localTime = DateTime.ParseExact(input, "yyyy-MM-dd H:mm", null);
        formattedTime = localTime.ToString("HH:mm");
            
            double c = Math.Ceiling(double.Parse(dynamicData[0].current.temp_c.ToString()));
            <p>@formattedTime</p>
    }
               

    <div class="row">
        <div class="col-md-2"><img src="@dynamicData[0].current.condition.icon"/></div>
            @{
                if(Celsius)
                        {
                    <div class="col-md-1"><p>@Math.Ceiling(double.Parse(dynamicData[0].current.temp_c.ToString()))°C</p></div>
                }
                else
                {
                            <div class="col-md-3"><p>@Math.Ceiling(double.Parse(dynamicData[0].current.temp_f.ToString()))°F</p></div>
                }
                
            }
          <div class="col-md-6">
                  <p>@dynamicData[0].current.condition.text</p>
                  @if(Celsius)
                        {
                             <p>Feels like @Math.Ceiling(double.Parse(@dynamicData[0].current.feelslike_c.ToString()))°C</p>
                }
                else
                {
                          <p>Feels like @Math.Ceiling(double.Parse(@dynamicData[0].current.feelslike_f.ToString()))°F</p>
                }
              </div>
           
    </div>
    <div class="row">
        <div class="col-md-4">
            Wind
        </div>
         <div class="col-md-4">
            Humidity
        </div>
         <div class="col-md-4">
            Pressure
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
                <p>@dynamicData[0].current.wind_kph km/h @dynamicData[0].current.wind_dir°</p> 
        </div>
         <div class="col-md-4">
                 <p>@dynamicData[0].current.humidity %</p>
        </div>
         <div class="col-md-4">
               <p>@dynamicData[0].current.pressure_mb MB</p> 
        </div>
    </div>

</div>
    @{
        int c1 = dynamicData[0].current.temp_c;
        int rainyDays = 0;
        int sunnyDays = 0;
        double maxTemperatureC = double.MinValue;
        double minTemperatureC = double.MaxValue;
        double maxTemperatureF = double.MinValue;
        double minTemperatureF = double.MaxValue;
        for (int i = 0; i < 7; i++)
        {
            double max_tempC = dynamicData[i].forecast.forecastday[0].day.maxtemp_c;
            if (max_tempC > maxTemperatureC)
            {
                maxTemperatureC = max_tempC;
            }
            double min_tempC = dynamicData[i].forecast.forecastday[0].day.mintemp_c;

            // Update minTemperatureC if the current temperature is smaller
            if (min_tempC < minTemperatureC)
            {
                minTemperatureC = min_tempC;
            }
            //FAHRENHEIT
            double max_tempF = dynamicData[i].forecast.forecastday[0].day.maxtemp_f;
            if (max_tempF > maxTemperatureF)
            {
                maxTemperatureF = max_tempF;
            }
            double min_tempF = dynamicData[i].forecast.forecastday[0].day.mintemp_f;

            // Update minTemperatureC if the current temperature is smaller
            if (min_tempF < minTemperatureF)
            {
                minTemperatureF = min_tempF;
            }
            var will_it_rain = dynamicData[i].forecast.forecastday[0].day.daily_will_it_rain;
            var will_it_snow = dynamicData[i].forecast.forecastday[0].day.daily_will_it_snow;
            if(will_it_rain==1 || will_it_snow==1)
            {
                rainyDays++;
            }
            else
            {
                sunnyDays++;
            }
            //temp+= dynamicData[i].forecast.forecastday[0].day.daily_will_it_snow;
        }
        if (Celsius)
        {
            _config.Data.Labels.Clear();
            _config.Data.Datasets.Clear();
            foreach (string color in new[] { $"Sunny Days {sunnyDays}", $"Rainy/Snowy Days {rainyDays}", $"Highest {maxTemperatureC}°C", $"Lowest {minTemperatureC}°C" })
            {
                

                _config.Data.Labels.Add(color);
            }
        }
        else
        {
            _config.Data.Labels.Clear();
            _config.Data.Datasets.Clear();
            foreach (string color in new[] { $"Sunny Days {sunnyDays}", $"Rainy/Snowy Days {rainyDays}", $"Highest {maxTemperatureF}°F", $"Lowest {minTemperatureF}°F" })
            {
        

                _config.Data.Labels.Add(color);
            }
        }

        PieDataset<int> dataset = new PieDataset<int>(new[] { sunnyDays, rainyDays, 3, 7 })
            {
                BackgroundColor = new[]
                            {
           ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"

             ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
            
            ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
        }
            };

        _config.Data.Datasets.Add(dataset);
}
<div style="width:500px;">
<Chart Config="_config" ></Chart>
</div>
</div>

<div>
    @{
    // Create an array of times from 00:00 to 23:00

        string[] times = Enumerable.Range(0, 12).Select(i => $"{i * 2:D2}:00").ToArray();



@foreach (string time in times)
{
            string modifiedTime = time;
            _config2.Data.Labels.Add(modifiedTime);
}
        List<double> temperatureData = new List<double>();

        for (int i = 0; i < 24; i++)
        {
            double tempC = dynamicData[0].forecast.forecastday[0].hour[i].temp_c;
            temperatureData.Add(tempC);
        }

        LineDataset<double> dataset2 = new LineDataset<double>(temperatureData.ToArray())
            {
                BorderColor = ColorUtil.ColorHexString(54, 162, 235), // Set line color (e.g., "Blue")
                Fill = true, // To prevent filling the area under the line
                Label = $"Today's Forecast for {dynamicData[0].location.name}",
                BackgroundColor = ColorUtil.ColorHexString(173, 216, 230),
                PointRadius = 3, // Set the radius of the dots
                PointHoverRadius = 4, // Set the radius of the dots on hover
                ShowLine = true, // Set to true to show the line connecting the 



            };

        _config2.Data.Datasets.Add(dataset2);
    }
    <div style="width:1000px;">
<Chart Config="_config2" ></Chart>
</div>
   <div style="width:1000px;">
       <div class="row">
           <div class="col-md-1">
                    <h2>Line</h2>
           </div>
                 <div class="col-md-1">
                          <h2>Line</h2>
           </div>
            <div class="col-md-1">
                    <h2>Line</h2>
           </div>
                 <div class="col-md-1">
                          <h2>Line</h2>
           </div>
            <div class="col-md-1">
                    <h2>Line</h2>
           </div>
                 <div class="col-md-1">
                          <h2>Line</h2>
           </div>
            <div class="col-md-1">
                    <h2>Line</h2>
           </div>
                 <div class="col-md-1">
                          <h2>Line</h2>
           </div>
       </div>
  
</div>
</div>

    <div class="container1">
        <div class="container1_margin">
            <p>Weather Forecast</p>
            <div class="row">
               <div class="col-md-2">
                   <img src="@dynamicData[0].forecast.forecastday[0].hour[20].condition.icon"/>
               </div>
               <div class="col-md-6">
                   <p>Day</p>
                   <p>@dynamicData[0].forecast.forecastday[0].hour[12].condition.text</p>
                    @if (Celsius)
                {
                         <p>The High will be @dynamicData[0].forecast.forecastday[0].day.maxtemp_c°C</p>
                }
                else
                {
                         <p>The High will be @dynamicData[0].forecast.forecastday[0].day.maxtemp_f°F</p>
                }
               
               </div>
            </div>
             <div class="row">
               <div class="col-md-2">
                   <img src="@dynamicData[0].forecast.forecastday[0].hour[20].condition.icon"/>
               </div>
               <div class="col-md-6">
                   <p>Night</p>
                   <p>@dynamicData[0].forecast.forecastday[0].hour[20].condition.text</p>
                @if (Celsius)
                {
                         <p>The Low will be @dynamicData[0].forecast.forecastday[0].day.mintemp_c°C</p>
                }
                else
                {
                         <p>The Low will be @dynamicData[0].forecast.forecastday[0].day.mintemp_f°F</p>
                }
               
               </div>
            </div>
            </div>
            </div>

    <div class="container1">
        <div class="container1_margin">
            <p>@dynamicData[@adjustedTime.Day - @current.Day].location.name, @dynamicData[@adjustedTime.Day - @current.Day].location.country</p>

            <div class="row">
                 <div class="col-md-1" style="margin-right:2%;">

                <img src="@dynamicData[@adjustedTime.Day - @current.Day].forecast.forecastday[0].hour[@adjustedTime.Hour].condition.icon"/>
                     </div>
                      <div class="col-md-4">
                           @if (Celsius)
                {
                            <h1>@dynamicData[@adjustedTime.Day - @current.Day].forecast.forecastday[0].hour[@adjustedTime.Hour].temp_c°c</h1>

                }
                else
                {
                                <h1>@dynamicData[@adjustedTime.Day - @current.Day].forecast.forecastday[0].hour[@adjustedTime.Hour].temp_f°f</h1>
                }
                     </div>
                      <div class="col-md-4">
                           <p style="margin: 0;">Wind: @dynamicData[@adjustedTime.Day - @current.Day].forecast.forecastday[0].hour[@adjustedTime.Hour].wind_kph KMPH</p>
                                <p style="margin: 0;">Humidity @dynamicData[@adjustedTime.Day - @current.Day].forecast.forecastday[0].hour[@adjustedTime.Hour].humidity %</p>


                          </div>
            </div>

              <p>@dynamicData[@adjustedTime.Day - @current.Day].forecast.forecastday[0].hour[@adjustedTime.Hour].condition.text | @adjustedTime.ToString("ddd, dd, HH:mm")</p>
        

        @if (ForecastDays)
        {
            DateTime currentDate = DateTime.Now;
            DateTime tomorrowDate = currentDate.AddDays(1).Date; // Resetting time part to midnight

            @for (int i = 1; i < 9; i++)
            {

                                                        <p style="display: inline; margin-right: 40px;">@tomorrowDate.ToString("H:mm")</p>
                tomorrowDate = new DateTime(@tomorrowDate.Year, tomorrowDate.Month, tomorrowDate.Day, tomorrowDate.Hour, 0, 0);

                tomorrowDate = @tomorrowDate.AddHours(3);

            }
        }
        else{
            @for (int i = 1; i < 9; i++)
            {

                                        <p style="display: inline; margin-right: 40px;">@currentTime.ToString("H:mm")</p>
                currentTime = new DateTime(@currentTime.Year, currentTime.Month, currentTime.Day, currentTime.Hour, 0, 0);

                currentTime = @currentTime.AddHours(3);

            }
        }
           
  


<div>

    <input class="range" type="range" id="slider" name="slider" min="0" max="1440" step="1" @bind="sliderValue"   @oninput="UpdateSlider" />
</div>


 <div class="temp_cards">
       
            @for (int i = 0; i < 7; i++)
            {
                string inputDate = dynamicData[i].forecast.forecastday[0].hour[0].time;
                DateTime dateTime = DateTime.ParseExact(inputDate, "yyyy-MM-dd HH:mm", null);
                double tempC = Math.Ceiling(double.Parse(dynamicData[i].forecast.forecastday[0].hour[0].temp_c.ToString()));
                double tempF = Math.Ceiling(double.Parse(dynamicData[i].forecast.forecastday[0].hour[0].temp_f.ToString()));
                string formattedResult = dateTime.ToString("ddd d");
                int currentIndex = i; 
                         <div class="temp_day" @onclick="() => ResetSlider(currentIndex)">
                    <div class="card-body">
                            <p class="card-title" style="text-align:center;">@formattedResult</p>
                           
                                        <img src="@dynamicData[i].forecast.forecastday[0].hour[0].condition.icon" style="width: 60px; height: 70px; text-align:center;"/>
                            @if(Celsius){
                                        <p class="card-text" style="text-align:center;">@tempC°C</p>
                        }
                        else
                        {
                                             <p class="card-text" style="text-align:center;">@tempF°F</p>
                        }
                        
                               
                    </div>
                </div>
            }
            
         



            </div>
</div>

</div>

            
 <div class="container1">
        <div class="container1_margin">
 <div class="centered_container">
     <h3>Weather Insights</h3>
     <div class="row">
         <div class=col-md-2>
             <img src="@dynamicData[0].forecast.forecastday[0].hour[current.Hour].condition.icon" /> 
         </div>
         <div class=col-md-8>
                    @if (Celsius)
                    {
            <h5>Feels like @dynamicData[0].current.feelslike_c°c</h5>

                    }
                    else
                    {
             <h5>Feels like @dynamicData[0].current.feelslike_f°f</h5>
                    }
         </div>
     </div>
     <h5>@dynamicData[0].current.condition.text</h5>
           
    <div class="container mt-5">
        <div class="row">
            <div class="col-md-6">
                <div class="forecast_item">
                <div><p>Chance of Rain </p></div>
                <div>@dynamicData[0].forecast.forecastday[0].day.daily_chance_of_rain%</div>
                </div>
                <div class="forecast_item">
                    <div> <p >Low - High</p></div>
                     @if (Celsius)
                            {
                                    <div>@dynamicData[0].forecast.forecastday[0].day.mintemp_c - 
                                    @dynamicData[0].forecast.forecastday[0].day.maxtemp_c°C</div>
                            }
                            else
                            {
                                     <div>@dynamicData[0].forecast.forecastday[0].day.mintemp_f - 
                                    @dynamicData[0].forecast.forecastday[0].day.maxtemp_f°F</div>
                            }

                </div>
                <div class="forecast_item">
                    <div> <p >Humidity</p></div>
                    <div>@dynamicData[0].forecast.forecastday[0].day.avghumidity%</div>
                </div>


            </div>
            <div class="col-md-6">
                 <div class="forecast_item">
                <div><p>Sunrise</p></div>
                <div>@dynamicData[0].forecast.forecastday[0].astro.sunrise</div>
                </div>
                <div class="forecast_item">
                <div><p>Sunset</p></div>
                <div>@dynamicData[0].forecast.forecastday[0].astro.sunset</div>
                </div>
                <div class="forecast_item">
                <div><p>Wind</p></div>
                <div>@dynamicData[0].current.wind_kph KPH</div>
                </div>
 
            </div>

        </div>
          </div>
    

</div>


</div>
</div>

